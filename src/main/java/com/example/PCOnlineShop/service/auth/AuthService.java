package com.example.PCOnlineShop.service.auth;

import com.example.PCOnlineShop.constant.RoleName;
import com.example.PCOnlineShop.model.account.Account;
import com.example.PCOnlineShop.repository.account.AccountRepository;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class AuthService {
    private final AccountRepository accountRepository;
    private final PasswordEncoder passwordEncoder;

    public void register(Account account) {
        // hash password before saving
        account.setPassword(passwordEncoder.encode(account.getPassword()));

        //set default role
        account.setRole(RoleName.Customer);

        //set enable to true
        account.setEnabled(true);

        // save to db
        accountRepository.save(account);
    }

    public void saveStaff(Account account) {
        // T√¨m trong DB xem staff n√†y ƒë√£ c√≥ ch∆∞a
        Account existing = accountRepository.findById(account.getAccountId()).orElse(null);

        // ‚úÖ N·∫øu c√≥ trong DB
        if (existing != null) {
            // N·∫øu m·∫≠t kh·∫©u m·ªõi kh√°c m·∫≠t kh·∫©u c≈© (t·ª©c l√† ng∆∞·ªùi d√πng ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u)
            if (!existing.getPassword().equals(account.getPassword())) {
                account.setPassword(passwordEncoder.encode(account.getPassword())); // m√£ h√≥a l·∫°i
            } else {
                account.setPassword(existing.getPassword()); // gi·ªØ nguy√™n hash c≈©
            }

            // Gi·ªØ nguy√™n tr·∫°ng th√°i enable
            account.setEnabled(existing.getEnabled());
        } else {
            // ‚úÖ N·∫øu l√† th√™m m·ªõi ‚Üí m√£ h√≥a lu√¥n
            account.setPassword(passwordEncoder.encode(account.getPassword()));
            account.setEnabled(true);
        }

        // Set role ƒë√∫ng
        account.setRole(RoleName.Staff);

        // L∆∞u l·∫°i
        accountRepository.save(account);
    }


    public void saveCustomer(Account account) {
        // üîπ T√¨m trong DB xem Customer n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
        Account existing = accountRepository.findById(account.getAccountId()).orElse(null);

        if (existing != null) {
            // üîπ N·∫øu m·∫≠t kh·∫©u thay ƒë·ªïi ‚Üí m√£ h√≥a l·∫°i
            if (!existing.getPassword().equals(account.getPassword())) {
                account.setPassword(passwordEncoder.encode(account.getPassword()));
            } else {
                // üîπ N·∫øu m·∫≠t kh·∫©u kh√¥ng ƒë·ªïi ‚Üí gi·ªØ nguy√™n hash c≈©
                account.setPassword(existing.getPassword());
            }

            // üîπ Gi·ªØ nguy√™n tr·∫°ng th√°i enabled
            account.setEnabled(existing.getEnabled());
        } else {
            // üîπ N·∫øu l√† th√™m m·ªõi ‚Üí m√£ h√≥a b√¨nh th∆∞·ªùng
            account.setPassword(passwordEncoder.encode(account.getPassword()));
            account.setEnabled(true);
        }

        // üîπ Set role Customer
        account.setRole(RoleName.Customer);

        // üîπ L∆∞u v√†o DB
        accountRepository.save(account);
    }


}
