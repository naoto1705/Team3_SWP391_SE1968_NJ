package com.example.PCOnlineShop.service.auth;

import com.example.PCOnlineShop.constant.RoleName;
import com.example.PCOnlineShop.model.account.Account;
import com.example.PCOnlineShop.repository.account.AccountRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final AccountRepository accountRepository;
    private final PasswordEncoder passwordEncoder;

    // üîπ ƒêƒÉng k√Ω kh√°ch h√†ng (Customer)
    public void register(Account account) {
        account.setPassword(passwordEncoder.encode(account.getPassword()));
        account.setRole(RoleName.Customer);
        account.setEnabled(true);
        accountRepository.save(account);
    }

    // ‚úÖ Th√™m / C·∫≠p nh·∫≠t Staff c√≥ ki·ªÉm tra tr√πng email & phone
    public void saveStaff(Account account) {
        // üîπ Ki·ªÉm tra email tr√πng
        Optional<Account> emailExists = accountRepository.findByEmail(account.getEmail());
        if (emailExists.isPresent() && emailExists.get().getAccountId() != account.getAccountId()) {
            throw new IllegalArgumentException("Email ƒë√£ t·ªìn t·∫°i!");
        }

        // üîπ Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i tr√πng
        Optional<Account> phoneExists = accountRepository.findByPhoneNumber(account.getPhoneNumber());
        if (phoneExists.isPresent() && phoneExists.get().getAccountId() != account.getAccountId()) {
            throw new IllegalArgumentException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
        }

        // üîπ T√¨m xem ƒëang update hay th√™m m·ªõi
        Account existing = accountRepository.findById(account.getAccountId()).orElse(null);

        if (existing != null) {
            // N·∫øu m·∫≠t kh·∫©u thay ƒë·ªïi th√¨ m√£ h√≥a l·∫°i
            if (!existing.getPassword().equals(account.getPassword())) {
                account.setPassword(passwordEncoder.encode(account.getPassword()));
            } else {
                account.setPassword(existing.getPassword());
            }

            // Gi·ªØ nguy√™n tr·∫°ng th√°i enabled
            account.setEnabled(existing.getEnabled());
        } else {
            // N·∫øu l√† th√™m m·ªõi
            account.setPassword(passwordEncoder.encode(account.getPassword()));
            account.setEnabled(true);
        }

        // ‚úÖ Set role staff r·ªìi l∆∞u
        account.setRole(RoleName.Staff);
        accountRepository.save(account);
    }

    // üîπ C·∫≠p nh·∫≠t / th√™m Customer (n·∫øu c·∫ßn)
    public void saveCustomer(Account account) {
        Account existing = accountRepository.findById(account.getAccountId()).orElse(null);

        if (existing != null) {
            if (!existing.getPassword().equals(account.getPassword())) {
                account.setPassword(passwordEncoder.encode(account.getPassword()));
            } else {
                account.setPassword(existing.getPassword());
            }
            account.setEnabled(existing.getEnabled());
        } else {
            account.setPassword(passwordEncoder.encode(account.getPassword()));
            account.setEnabled(true);
        }

        account.setRole(RoleName.Customer);
        accountRepository.save(account);
    }
}
