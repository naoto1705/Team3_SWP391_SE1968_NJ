<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/PCOnlineShop/service/build/CompatibilityService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/PCOnlineShop/service/build/CompatibilityService.java" />
              <option name="originalContent" value="package com.example.PCOnlineShop.service.build;&#10;&#10;&#10;import com.example.PCOnlineShop.dto.build.BuildItemDto;&#10;import com.example.PCOnlineShop.model.build.*;&#10;import lombok.AllArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;@AllArgsConstructor&#10;public class CompatibilityService {&#10;&#10;    public  boolean checkMainboardCompatibility(BuildItemDto buildItem, Mainboard mainboard) {&#10;        CPU cpu = buildItem.getCpu();&#10;        if (cpu != null &amp;&amp; !mainboard.getSocket().equals(cpu.getSocket())) {&#10;            return false;&#10;        }&#10;        GPU gpu = buildItem.getGpu();&#10;        if (gpu != null &amp;&amp; parseVersion(mainboard.getPcieVersion())&#10;                &lt; parseVersion(gpu.getPcieVersion())) {&#10;            return false;&#10;        }&#10;        // Add more compatibility checks as needed&#10;        return true; // Placeholder&#10;    }&#10;&#10;    public boolean checkCpuCompatibility(BuildItemDto buildItem, CPU cpu) {&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;&#10;        if (!mainboard.getSocket().equals(cpu.getSocket())) {&#10;            return false;&#10;        }&#10;        // Add more compatibility checks as needed&#10;        return true; // Placeholder&#10;    }&#10;&#10;    public boolean checkGpuCompatibility(BuildItemDto buildItem, GPU gpu) {&#10;        CPU cpu = buildItem.getCpu();&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;&#10;        if (parseVersion(cpu.getPcieVersion())&#10;            &lt; parseVersion(gpu.getPcieVersion())) return false;&#10;        if (parseVersion(mainboard.getPcieVersion())&#10;            &lt; parseVersion(gpu.getPcieVersion())) return false;&#10;        return true;&#10;    }&#10;&#10;    public boolean checkCaseCompatibility(BuildItemDto buildItem, Case pcCase) {&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;        GPU gpu = buildItem.getGpu();&#10;        &#10;        // Kiểm tra tương thích form factor với mainboard&#10;        if (mainboard != null) {&#10;            if (!isCaseFormFactorCompatible(pcCase.getFormFactor(), mainboard.getFormFactor())) {&#10;                return false;&#10;            }&#10;        }&#10;        &#10;        // Kiểm tra độ dài GPU có phù hợp với case&#10;        if (gpu != null &amp;&amp; pcCase.getGpuMaxLength() &lt; gpu.getLength()) {&#10;            return false;&#10;        }&#10;        &#10;        return true;&#10;    }&#10;    &#10;    private boolean isCaseFormFactorCompatible(String caseFormFactor, String mbFormFactor) {&#10;        caseFormFactor = caseFormFactor.toUpperCase();&#10;        mbFormFactor = mbFormFactor.toUpperCase();&#10;        &#10;        // Case ATX có thể chứa được tất cả loại mainboard&#10;        if (caseFormFactor.contains(&quot;ATX&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Case Micro-ATX có thể chứa Micro-ATX và Mini-ITX&#10;        if (caseFormFactor.contains(&quot;MICRO&quot;)) {&#10;            return mbFormFactor.contains(&quot;MICRO&quot;) || mbFormFactor.contains(&quot;MINI&quot;);&#10;        }&#10;        &#10;        // Case Mini-ITX chỉ có thể chứa Mini-ITX&#10;        if (caseFormFactor.contains(&quot;MINI&quot;)) {&#10;            return mbFormFactor.contains(&quot;MINI&quot;);&#10;        }&#10;        &#10;        return caseFormFactor.equals(mbFormFactor);&#10;    }&#10;&#10;    public static double parseVersion(String version) {&#10;        if (version == null) return 0.0;&#10;        try {&#10;            return Double.parseDouble(version.replace(&quot;PCIe&quot;, &quot;&quot;)&#10;                    .replace(&quot; &quot;, &quot;&quot;));&#10;        } catch (NumberFormatException e) {&#10;            return 0.0;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.PCOnlineShop.service.build;&#10;&#10;&#10;import com.example.PCOnlineShop.dto.build.BuildItemDto;&#10;import com.example.PCOnlineShop.model.build.*;&#10;import lombok.AllArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;@AllArgsConstructor&#10;public class CompatibilityService {&#10;&#10;    public  boolean checkMainboardCompatibility(BuildItemDto buildItem, Mainboard mainboard) {&#10;        CPU cpu = buildItem.getCpu();&#10;        if (cpu != null &amp;&amp; !mainboard.getSocket().equals(cpu.getSocket())) {&#10;            return false;&#10;        }&#10;        GPU gpu = buildItem.getGpu();&#10;        if (gpu != null &amp;&amp; parseVersion(mainboard.getPcieVersion())&#10;                &lt; parseVersion(gpu.getPcieVersion())) {&#10;            return false;&#10;        }&#10;        // Add more compatibility checks as needed&#10;        return true; // Placeholder&#10;    }&#10;&#10;    public boolean checkCpuCompatibility(BuildItemDto buildItem, CPU cpu) {&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;&#10;        if (!mainboard.getSocket().equals(cpu.getSocket())) {&#10;            return false;&#10;        }&#10;        // Add more compatibility checks as needed&#10;        return true; // Placeholder&#10;    }&#10;&#10;    public boolean checkGpuCompatibility(BuildItemDto buildItem, GPU gpu) {&#10;        CPU cpu = buildItem.getCpu();&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;&#10;        if (parseVersion(cpu.getPcieVersion())&#10;            &lt; parseVersion(gpu.getPcieVersion())) return false;&#10;        if (parseVersion(mainboard.getPcieVersion())&#10;            &lt; parseVersion(gpu.getPcieVersion())) return false;&#10;        return true;&#10;    }&#10;&#10;    public boolean checkCaseCompatibility(BuildItemDto buildItem, Case pcCase) {&#10;        Mainboard mainboard = buildItem.getMainboard();&#10;        GPU gpu = buildItem.getGpu();&#10;        &#10;        // Kiểm tra tương thích form factor với mainboard&#10;        if (mainboard != null) {&#10;            if (!isCaseFormFactorCompatible(pcCase.getFormFactor(), mainboard.getFormFactor())) {&#10;                return false;&#10;            }&#10;        }&#10;        &#10;        // Kiểm tra độ dài GPU có phù hợp với case&#10;        if (gpu != null &amp;&amp; pcCase.getGpuMaxLength() &lt; gpu.getLength()) {&#10;            return false;&#10;        }&#10;        &#10;        return true;&#10;    }&#10;    &#10;    private boolean isCaseFormFactorCompatible(String caseFormFactor, String mbFormFactor) {&#10;        caseFormFactor = caseFormFactor.toUpperCase();&#10;        mbFormFactor = mbFormFactor.toUpperCase();&#10;        &#10;        // Case ATX có thể chứa được tất cả loại mainboard&#10;        if (caseFormFactor.contains(&quot;ATX&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Case Micro-ATX có thể chứa Micro-ATX và Mini-ITX&#10;        if (caseFormFactor.contains(&quot;MICRO&quot;)) {&#10;            return mbFormFactor.contains(&quot;MICRO&quot;) || mbFormFactor.contains(&quot;MINI&quot;);&#10;        }&#10;        &#10;        // Case Mini-ITX chỉ có thể chứa Mini-ITX&#10;        if (caseFormFactor.contains(&quot;MINI&quot;)) {&#10;            return mbFormFactor.contains(&quot;MINI&quot;);&#10;        }&#10;        &#10;        return caseFormFactor.equals(mbFormFactor);&#10;    }&#10;&#10;    public static double parseVersion(String version) {&#10;        if (version == null) return 0.0;&#10;        try {&#10;            return Double.parseDouble(version.replace(&quot;PCIe&quot;, &quot;&quot;)&#10;                    .replace(&quot; &quot;, &quot;&quot;));&#10;        } catch (NumberFormatException e) {&#10;            return 0.0;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>